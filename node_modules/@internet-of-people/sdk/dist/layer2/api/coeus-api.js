"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const optional_js_1 = tslib_1.__importDefault(require("optional-js"));
const Crypto = tslib_1.__importStar(require("@internet-of-people/morpheus-crypto"));
const http_1 = require("../../internal/http");
const { log } = Crypto;
class CoeusApi {
    constructor(networkConfig) {
        this.networkConfig = networkConfig;
        const baseURL = `${networkConfig.host}:${networkConfig.port}/coeus/v1`;
        this.clientInstance = axios_1.default.create({
            baseURL,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
    async resolve(name) {
        const domain = name.toString();
        log(`Resolving ${domain}...`);
        const resp = await http_1.apiGet(this.clientInstance, `/resolve/${domain}`);
        return resp.data.data;
    }
    async getMetadata(name) {
        const domain = name.toString();
        log(`Getting metadata of ${domain}...`);
        const resp = await http_1.apiGet(this.clientInstance, `/metadata/${domain}`);
        return resp.data;
    }
    async getChildren(name) {
        const domain = name.toString();
        log(`Getting children of ${name}...`);
        const resp = await http_1.apiGet(this.clientInstance, `/children/${domain}`);
        return resp.data.children;
    }
    async getLastNonce(pk) {
        log(`Getting last nonce for ${pk}...`);
        const resp = await http_1.apiGet(this.clientInstance, `/last-nonce/${pk}`);
        return BigInt(resp.data.nonce);
    }
    async getTxnStatus(txid) {
        log(`Getting txn status for ${txid}...`);
        try {
            const resp = await http_1.apiGet(this.clientInstance, `/txn-status/${txid}`);
            return optional_js_1.default.of(resp.data);
        }
        catch (e) {
            if (e instanceof http_1.HttpError && e.statusCode === 404) {
                return optional_js_1.default.empty();
            }
            throw e;
        }
    }
}
exports.CoeusApi = CoeusApi;
exports.createCoeusApi = (networkConfig) => {
    return new CoeusApi(networkConfig);
};
//# sourceMappingURL=coeus-api.js.map