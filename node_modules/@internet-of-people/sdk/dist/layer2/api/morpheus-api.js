"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const optional_js_1 = tslib_1.__importDefault(require("optional-js"));
const Crypto = tslib_1.__importStar(require("@internet-of-people/morpheus-crypto"));
const Layer2 = tslib_1.__importStar(require("../../layer2"));
const http_1 = require("../../internal/http");
const { log } = Crypto;
class MorpheusApi {
    constructor(networkConfig) {
        this.networkConfig = networkConfig;
        const baseURL = `${networkConfig.host}:${networkConfig.port}/morpheus/v1`;
        this.clientInstance = axios_1.default.create({
            baseURL,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
    async getBeforeProofHistory(contentId) {
        log(`Getting history of ${contentId}...`);
        const url = `/before-proof/${contentId}/history`;
        const resp = await http_1.apiGet(this.clientInstance, url);
        const history = resp.data;
        return history;
    }
    async beforeProofExists(contentId, height) {
        log(`Getting if content ${contentId} exists at ${height || 'now'}...`);
        let url = `/before-proof/${contentId}/exists`;
        if (height) {
            url = `${url}/${height}`;
        }
        const resp = await http_1.apiGet(this.clientInstance, url);
        const exists = resp.data;
        return exists;
    }
    async getDidDocument(did, height) {
        log(`Getting Did document ${did} at ${height || 'now'}...`);
        const resp = await http_1.apiGet(this.clientInstance, this.withUntilHeight(`/did/${did}/document`, height));
        const documentData = resp.data;
        const result = new Layer2.DidDocument(documentData);
        return result;
    }
    // NOTE that layer-2 status is returned here, i.e. Morpheus/SSI transactions are expected.
    //      Layer1 (e.g. transfer) transactions are not found thus Optional.empty() is returned for them.
    async getTxnStatus(morpheusTxId) {
        log(`Getting txn layer-2 status for ${morpheusTxId}...`);
        try {
            const resp = await http_1.apiGet(this.clientInstance, `/txn-status/${morpheusTxId}`);
            return optional_js_1.default.of(resp.data);
        }
        catch (e) {
            if (e instanceof http_1.HttpError && e.statusCode === 404) {
                return optional_js_1.default.empty();
            }
            throw e;
        }
    }
    async getLastTxId(did) {
        log(`Getting last txn id for ${did}...`);
        try {
            const resp = await http_1.apiGet(this.clientInstance, `/did/${did}/transactions/last`);
            return resp.data.transactionId;
        }
        catch (e) {
            if (e instanceof http_1.HttpError && e.statusCode === 404) {
                return null;
            }
            throw e;
        }
    }
    async getDidTransactionIds(did, fromHeight, untilHeight) {
        log(`Getting transaction ids for ${did}...`);
        return this.didTransactionIdsQuery(false, did, fromHeight, untilHeight);
    }
    async getDidTransactionAttemptIds(did, fromHeight, untilHeight) {
        log(`Getting transaction attempt ids for ${did}...`);
        return this.didTransactionIdsQuery(true, did, fromHeight, untilHeight);
    }
    async getDidOperations(did, fromHeight, untilHeight) {
        log(`Getting did operations for ${did}...`);
        return this.didOperationQuery(false, did, fromHeight, untilHeight);
    }
    async getDidOperationAttempts(did, fromHeight, untilHeight) {
        log(`Getting did operations for ${did}...`);
        return this.didOperationQuery(true, did, fromHeight, untilHeight);
    }
    async checkTransactionValidity(operationAttempts) {
        log('Checking operation attempts\' validity...');
        const resp = await http_1.apiPost(this.clientInstance, '/check-transaction-validity', JSON.stringify(operationAttempts));
        return resp.data;
    }
    async didTransactionIdsQuery(includeAttempts, did, fromHeight, untilHeight) {
        try {
            const path = includeAttempts ? 'transaction-attempts' : 'transactions';
            const resp = await http_1.apiGet(this.clientInstance, this.withUntilHeight(`/did/${did}/${path}/${fromHeight}`, untilHeight));
            return resp.data;
        }
        catch (e) {
            if (e instanceof http_1.HttpError && e.statusCode === 404) {
                return [];
            }
            throw e;
        }
    }
    async didOperationQuery(includeAttempts, did, fromHeight, untilHeight) {
        try {
            const path = includeAttempts ? 'operation-attempts' : 'operations';
            const resp = await http_1.apiGet(this.clientInstance, this.withUntilHeight(`/did/${did}/${path}/${fromHeight}`, untilHeight));
            return resp.data;
        }
        catch (e) {
            if (e instanceof http_1.HttpError && e.statusCode === 404) {
                return [];
            }
            throw e;
        }
    }
    withUntilHeight(url, height) {
        return height ? `${url}/${height}` : url;
    }
}
exports.MorpheusApi = MorpheusApi;
exports.createMorpheusApi = (networkConfig) => {
    return new MorpheusApi(networkConfig);
};
//# sourceMappingURL=morpheus-api.js.map