"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const morpheus_crypto_1 = require("@internet-of-people/morpheus-crypto");
class Signed {
    constructor(data, typeName) {
        this.data = data;
        this.typeName = typeName;
        if (!this.data) {
            throw new Error(`Signed ${this.typeName} cannot be constructed without any data`);
        }
    }
    get signature() {
        if (!this.data.signature) {
            throw new Error(`Signed ${this.typeName} ${this.contentId} is missing signature`);
        }
        return this.data.signature;
    }
    get afterProof() {
        const { afterEnvelope } = this;
        if (afterEnvelope.afterProof) {
            return afterEnvelope.afterProof;
        }
        return null;
    }
    get payload() {
        const { afterEnvelope } = this;
        if (afterEnvelope.afterProof) {
            return afterEnvelope.content;
        }
        return this.data.content;
    }
    get payloadObject() {
        if (typeof this.payload !== 'object') {
            throw new Error(`Signed ${this.typeName} ${this.contentId} only has a digest of the content`);
        }
        return this.payload;
    }
    get contentId() {
        return morpheus_crypto_1.digestJson(this.data);
    }
    get signableContentId() {
        return typeof this.data.content === 'object' ?
            morpheus_crypto_1.digestJson(this.data.content) :
            this.data.content;
    }
    checkSignature() {
        const publicKey = new morpheus_crypto_1.PublicKey(this.signature.publicKey);
        const signature = new morpheus_crypto_1.Signature(this.signature.bytes);
        const validator = new morpheus_crypto_1.SignedJson(publicKey, this.data.content, signature);
        return validator.validate();
    }
    get afterEnvelope() {
        if (!this.data.content) {
            throw new Error(`Signed ${this.typeName} ${this.contentId} is missing content`);
        }
        return this.data.content;
    }
}
exports.Signed = Signed;
//# sourceMappingURL=signed.js.map