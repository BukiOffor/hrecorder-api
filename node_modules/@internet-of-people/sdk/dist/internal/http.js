"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class HttpError extends Error {
    constructor(statusCode, statusText, resp) {
        super(`Http ${statusCode}. ${statusText}`);
        this.statusCode = statusCode;
        this.statusText = statusText;
        this.resp = resp;
    }
}
exports.HttpError = HttpError;
const noExceptionSetting = {
    validateStatus: (_) => {
        return true;
    },
};
const throwIfFailed = (resp) => {
    if (resp.status >= 200 && resp.status < 300) {
        return resp;
    }
    else if (resp.status === 429) {
        throw new HttpError(resp.status, 'Too many requests were sent to the Hydra Network, rate limit exceeded. Wait 1 minute for further requests.', resp);
    }
    else {
        throw new HttpError(resp.status, resp.statusText, resp);
    }
};
exports.apiGet = async (api, endpoint) => {
    return throwIfFailed(await api.get(endpoint, noExceptionSetting));
};
exports.apiPost = async (api, endpoint, data) => {
    return throwIfFailed(await api.post(endpoint, data, noExceptionSetting));
};
//# sourceMappingURL=http.js.map