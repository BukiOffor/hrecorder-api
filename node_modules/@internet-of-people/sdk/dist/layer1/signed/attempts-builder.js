"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const operation_type_1 = require("../operation-type");
const to_data_1 = require("./to-data");
const operation_1 = require("./operation");
const add_key_1 = require("./add-key");
const add_right_1 = require("./add-right");
const revoke_key_1 = require("./revoke-key");
const revoke_right_1 = require("./revoke-right");
const tombstone_did_1 = require("./tombstone-did");
class SignedOperationAttemptsBuilder {
    constructor(finish, signer) {
        this.finish = finish;
        this.signer = signer;
        this.signableOperations = [];
        this.did = null;
        this.lastTxId = null;
    }
    on(did, lastTxId) {
        this.did = did;
        this.lastTxId = lastTxId;
        return this;
    }
    /* eslint @typescript-eslint/no-non-null-assertion:0 */
    addKey(auth, expiresAtHeight) {
        this.signableOperations.push(new add_key_1.AddKey(this.did, this.lastTxId, auth, expiresAtHeight));
        return this;
    }
    revokeKey(auth) {
        this.signableOperations.push(new revoke_key_1.RevokeKey(this.did, this.lastTxId, auth));
        return this;
    }
    addRight(auth, right) {
        this.signableOperations.push(new add_right_1.AddRight(this.did, this.lastTxId, auth, right));
        return this;
    }
    revokeRight(auth, right) {
        this.signableOperations.push(new revoke_right_1.RevokeRight(this.did, this.lastTxId, auth, right));
        return this;
    }
    tombstoneDid() {
        this.signableOperations.push(new tombstone_did_1.TombstoneDid(this.did, this.lastTxId));
        return this;
    }
    sign(keyId) {
        const signableOperationDatas = this.signableOperations.map(to_data_1.toSignableData);
        const opBytes = operation_1.Signed.serialize(signableOperationDatas);
        const signedMessage = this.signer.signDidOperations(keyId, opBytes);
        const signedOperationData = {
            operation: operation_type_1.OperationType.Signed,
            signables: signableOperationDatas,
            signerPublicKey: signedMessage.publicKey.toString(),
            signature: signedMessage.signature.toString(),
        };
        return this.finish(signedOperationData);
    }
}
exports.SignedOperationAttemptsBuilder = SignedOperationAttemptsBuilder;
//# sourceMappingURL=attempts-builder.js.map