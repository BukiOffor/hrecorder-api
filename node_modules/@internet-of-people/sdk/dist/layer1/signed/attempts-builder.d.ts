import { Did, KeyId } from '@internet-of-people/morpheus-crypto';
import { Crypto, Sdk, Layer1 } from '../../types';
import { OperationAttemptsBuilder } from '../attempts-builder';
export interface ISignedOperationBuilderNeedsDid {
    on(did: Did, lastTxId: Sdk.TransactionId | null): ISignedOperationBuilder;
}
export interface ISignedOperationBuilder extends ISignedOperationBuilderNeedsDid {
    addKey(auth: Crypto.Authentication, expiresAtHeight?: number): ISignedOperationBuilder;
    revokeKey(auth: Crypto.Authentication): ISignedOperationBuilder;
    addRight(auth: Crypto.Authentication, right: Sdk.Right): ISignedOperationBuilder;
    revokeRight(auth: Crypto.Authentication, right: Sdk.Right): ISignedOperationBuilder;
    tombstoneDid(): ISignedOperationBuilder;
    sign(keyId: KeyId): OperationAttemptsBuilder;
}
export declare class SignedOperationAttemptsBuilder implements ISignedOperationBuilder {
    private readonly finish;
    private readonly signer;
    private readonly signableOperations;
    private did;
    private lastTxId;
    constructor(finish: (operation: Layer1.ISignedOperationsData) => OperationAttemptsBuilder, signer: Crypto.IMorpheusSigner);
    on(did: Did, lastTxId: Sdk.TransactionId): ISignedOperationBuilder;
    addKey(auth: Crypto.Authentication, expiresAtHeight?: number): ISignedOperationBuilder;
    revokeKey(auth: Crypto.Authentication): ISignedOperationBuilder;
    addRight(auth: Crypto.Authentication, right: Sdk.Right): ISignedOperationBuilder;
    revokeRight(auth: Crypto.Authentication, right: Sdk.Right): ISignedOperationBuilder;
    tombstoneDid(): ISignedOperationBuilder;
    sign(keyId: KeyId): OperationAttemptsBuilder;
}
//# sourceMappingURL=attempts-builder.d.ts.map