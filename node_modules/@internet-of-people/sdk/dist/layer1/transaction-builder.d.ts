import { Interfaces as CryptoIf, Transactions, Utils } from '@arkecosystem/crypto';
import { IOperationData } from '../types/layer1';
export declare class MorpheusTransactionBuilder extends Transactions.TransactionBuilder<MorpheusTransactionBuilder> {
    private static readonly FLAKES_PER_BYTES;
    private static readonly OFFSET_BYTES;
    constructor();
    private get typedData();
    /**
     * Read more here:
     * https://blog.ark.io/towards-flexible-marketplace-with-ark-dynamic-fees-running-on-new-core-31f1aaf1e867
     * @param attempts
     */
    static calculateFee(attempts: IOperationData[]): Utils.BigNumber;
    fromOperationAttempts(attempts: IOperationData[]): MorpheusTransactionBuilder;
    getStruct(): CryptoIf.ITransactionData;
    protected instance(): MorpheusTransactionBuilder;
}
//# sourceMappingURL=transaction-builder.d.ts.map