import { Interfaces } from '@arkecosystem/crypto';
import Optional from 'optional-js';
import { NetworkConfig } from '../../network';
import { Layer1, Sdk } from '../../types';
export declare class AxiosClient implements Layer1.IClient {
    readonly networkConfig: NetworkConfig;
    private readonly clientInstance;
    constructor(networkConfig: NetworkConfig);
    sendTx(tx: Interfaces.ITransactionJson): Promise<string>;
    sendMultipleTx(transactions: Interfaces.ITransactionJson[]): Promise<Layer1.ITransactionResult>;
    getTxnStatus(txId: Sdk.TransactionId): Promise<Optional<Layer1.ITransactionStatus>>;
    getWallet(address: string): Promise<Optional<Layer1.IWalletResponse>>;
    getWalletNonce(address: string): Promise<bigint>;
    getWalletBalance(address: string): Promise<bigint>;
    getNodeCryptoConfig(): Promise<Interfaces.INetworkConfig>;
    getCurrentHeight(): Promise<number>;
}
//# sourceMappingURL=client.d.ts.map