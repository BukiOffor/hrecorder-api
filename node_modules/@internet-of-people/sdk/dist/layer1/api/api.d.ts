import { Interfaces } from '@arkecosystem/crypto';
import Optional from 'optional-js';
import { HydraPrivate, SecpPublicKey } from '@internet-of-people/morpheus-crypto';
import * as Types from '../../types';
import { NetworkConfig } from '../../network';
import { PublicKey, UserOperation } from '../../coeus-wasm';
export declare class Api implements Types.Layer1.IApi {
    readonly clientInstance: Types.Layer1.IClient;
    constructor(clientInstance: Types.Layer1.IClient);
    getNodeCryptoConfig(): Promise<Interfaces.INetworkConfig>;
    getCurrentHeight(): Promise<number>;
    getTxnStatus(txId: string): Promise<Optional<Types.Layer1.ITransactionStatus>>;
    getWallet(address: string): Promise<Optional<Types.Layer1.IWalletResponse>>;
    getWalletNonce(address: string): Promise<bigint>;
    getWalletBalance(address: string): Promise<bigint>;
    sendTransferTx(fromAddress: string, toAddress: string, amountFlake: bigint, hydraPrivate: HydraPrivate, nonce?: bigint, vendorField?: string, manualFee?: bigint): Promise<string>;
    sendTx(signedTx: Interfaces.ITransactionData): Promise<string>;
    sendMultipleTx(signedTxns: Interfaces.ITransactionData[]): Promise<Types.Layer1.ITransactionResult>;
    sendVoteTx(fromAddress: string, delegate: SecpPublicKey, hydraPrivate: HydraPrivate, nonce?: bigint, vendorField?: string, manualFee?: bigint): Promise<string>;
    sendUnvoteTx(fromAddress: string, delegate: SecpPublicKey, hydraPrivate: HydraPrivate, nonce?: bigint, vendorField?: string, manualFee?: bigint): Promise<string>;
    sendTransferTxWithWIF(fromWIF: string, toAddress: string, amountFlake: bigint, nonce?: bigint, vendorField?: string, manualFee?: bigint): Promise<string>;
    sendTransferTxWithPassphrase(fromPassphrase: string, toAddress: string, amountFlake: BigInt, nonce?: BigInt, vendorField?: string, manualFee?: BigInt): Promise<string>;
    sendMorpheusTx(senderAddress: string, morpheusAsset: Types.Layer1.IMorpheusAsset, hydraPrivate: HydraPrivate, nonce?: bigint): Promise<string>;
    sendMorpheusTxWithWIF(attempts: Types.Layer1.IOperationData[], fromWIF: string, nonce?: bigint): Promise<string>;
    sendMorpheusTxWithPassphrase(attempts: Types.Layer1.IOperationData[], fromPassphrase: string, nonce?: bigint): Promise<string>;
    sendCoeusTx(fromAddress: string, userOperations: UserOperation[], hydraPrivate: HydraPrivate, layer1SenderNonce?: bigint, layer2PublicKeyNonce?: bigint): Promise<string>;
    nextHydraNonce(address: string): Promise<bigint>;
    nextCoeusNonce(pubKey: PublicKey): Promise<bigint>;
    private getGasNonceAndCheckBalance;
    private buildMorpheusTx;
    private buildTransferTxWithAddress;
}
export declare const createApi: (networkConfig: NetworkConfig) => Promise<Types.Layer1.IApi>;
//# sourceMappingURL=api.d.ts.map