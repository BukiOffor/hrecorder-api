"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const operation_type_1 = require("./operation-type");
exports.visitOperation = (operation, visitor) => {
    switch (operation) {
        case operation_type_1.OperationType.Signed:
            return visitor.signed();
        case operation_type_1.OperationType.RegisterBeforeProof:
            return visitor.registerBeforeProof();
        default:
            throw new Error(`Unknown operation type ${operation}`);
    }
};
// TODO generate this based on Object.keys(OperationType).filter(...).map(...)
const allOps = [
    operation_type_1.OperationType.Signed,
    operation_type_1.OperationType.RegisterBeforeProof,
];
exports.visitAllOperationTypes = (visitor) => {
    return allOps.map((type) => {
        return exports.visitOperation(type, visitor);
    });
};
exports.visitSignableOperation = (operation, visitor) => {
    switch (operation) {
        case operation_type_1.SignableOperationType.AddKey:
            return visitor.addKey();
        case operation_type_1.SignableOperationType.RevokeKey:
            return visitor.revokeKey();
        case operation_type_1.SignableOperationType.AddRight:
            return visitor.addRight();
        case operation_type_1.SignableOperationType.RevokeRight:
            return visitor.revokeRight();
        case operation_type_1.SignableOperationType.TombstoneDid:
            return visitor.tombstoneDid();
        default: {
            throw new Error(`Unknown signable operation type ${operation}`);
        }
    }
};
const allSignableOps = [
    operation_type_1.SignableOperationType.AddKey,
    operation_type_1.SignableOperationType.RevokeKey,
    operation_type_1.SignableOperationType.AddRight,
    operation_type_1.SignableOperationType.RevokeRight,
    operation_type_1.SignableOperationType.TombstoneDid,
];
exports.visitAllSignableOperationTypes = (visitor) => {
    return allSignableOps.map((type) => {
        return exports.visitSignableOperation(type, visitor);
    });
};
//# sourceMappingURL=visitor.js.map