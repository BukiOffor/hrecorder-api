"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("@arkecosystem/crypto");
const transaction_1 = require("./transaction");
class MorpheusTransactionBuilder extends crypto_1.Transactions.TransactionBuilder {
    constructor() {
        super();
        this.typedData.type = transaction_1.MorpheusTransaction.type;
        this.typedData.typeGroup = transaction_1.MorpheusTransaction.typeGroup;
        this.typedData.version = 2;
        this.typedData.amount = crypto_1.Utils.BigNumber.ZERO;
        this.typedData.asset = { operationAttempts: [] };
    }
    get typedData() {
        return this.data;
    }
    /**
     * Read more here:
     * https://blog.ark.io/towards-flexible-marketplace-with-ark-dynamic-fees-running-on-new-core-31f1aaf1e867
     * @param attempts
     */
    static calculateFee(attempts) {
        const txLength = JSON.stringify(attempts).length;
        return crypto_1.Utils.BigNumber
            .make(this.OFFSET_BYTES)
            .plus(txLength)
            .times(this.FLAKES_PER_BYTES);
    }
    fromOperationAttempts(attempts) {
        this.typedData.asset.operationAttempts = attempts;
        this.typedData.fee = MorpheusTransactionBuilder.calculateFee(attempts);
        return this;
    }
    getStruct() {
        const struct = super.getStruct();
        struct.amount = this.typedData.amount;
        struct.asset = this.typedData.asset;
        return struct;
    }
    instance() {
        return this;
    }
}
exports.MorpheusTransactionBuilder = MorpheusTransactionBuilder;
// see minFeePool:
// https://github.com/Internet-of-People/hydra-core/blob/master/packages/core/bin/config/mainnet/plugins.js
MorpheusTransactionBuilder.FLAKES_PER_BYTES = 3000;
MorpheusTransactionBuilder.OFFSET_BYTES = 15;
//# sourceMappingURL=transaction-builder.js.map