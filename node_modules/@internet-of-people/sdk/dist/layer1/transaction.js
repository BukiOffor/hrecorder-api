"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("@arkecosystem/crypto");
const schemas_1 = require("./schemas");
const serde_1 = require("./serde");
class MorpheusTransaction extends crypto_1.Transactions.Transaction {
    constructor() {
        super(...arguments);
        this.data = {
            amount: crypto_1.Utils.BigNumber.make(0),
            asset: { operationAttempts: [] },
            fee: crypto_1.Utils.BigNumber.make(0),
            senderPublicKey: '',
            timestamp: 0,
            type: MorpheusTransaction.type,
        };
    }
    /**
     * Returns the schema of the Morpheus transaction. The asset consists of a collection of operation attempts.
     */
    static getSchema() {
        // noinspection TypeScriptValidateJSTypes
        return crypto_1.Transactions.schemas.extend(crypto_1.Transactions.schemas.transactionBaseSchema, {
            $id: this.key,
            required: ['asset', 'type', 'typeGroup'],
            properties: {
                type: { transactionType: this.type },
                typeGroup: { const: this.typeGroup },
                amount: { bignumber: { minimum: 0, maximum: 0 } },
                asset: {
                    required: ['operationAttempts'],
                    // additionalProperties: false,
                    properties: {
                        operationAttempts: {
                            type: 'array',
                            items: {
                                anyOf: schemas_1.operationSchemas(),
                            },
                        },
                    },
                },
            },
        });
    }
    serialize() {
        const data = this.data.asset;
        return serde_1.toBuffer(data);
    }
    deserialize(buffer) {
        const data = serde_1.fromBuffer(buffer);
        this.data.asset = data;
    }
}
exports.MorpheusTransaction = MorpheusTransaction;
MorpheusTransaction.typeGroup = 4242;
MorpheusTransaction.type = 1;
MorpheusTransaction.key = 'morpheusTransaction';
MorpheusTransaction.defaultStaticFee = crypto_1.Utils.BigNumber.make(1e7);
//# sourceMappingURL=transaction.js.map