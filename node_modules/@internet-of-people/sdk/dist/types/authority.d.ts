import * as Sdk from './sdk';
import { Status } from '../authority';
export declare type CapabilityLink = string;
export interface IRequestStatus {
    status: Status;
    signedStatement: Sdk.ISigned<Sdk.IWitnessStatement> | null;
    rejectionReason: string | null;
}
export interface IRequestEntry {
    capabilityLink: CapabilityLink;
    requestId: Sdk.ContentId;
    dateOfRequest: Sdk.DateTime;
    status: Status;
    processId: Sdk.ContentId;
    notes: string | null;
}
export interface IPublicApi {
    listProcesses(): Promise<Sdk.ContentId[]>;
    getPublicBlob(contentId: Sdk.ContentId): Promise<unknown>;
    sendRequest(witnessRequest: Sdk.ISigned<Sdk.IWitnessRequest>): Promise<CapabilityLink>;
    getRequestStatus(capabilityLink: CapabilityLink): Promise<IRequestStatus>;
}
export interface IPrivateApi {
    listRequests(clerkPk: string): Promise<IRequestEntry[]>;
    getPrivateBlob(clerkPk: string, contentId: Sdk.ContentId): Promise<unknown>;
    approveRequest(clerkPk: string, capabilityLink: CapabilityLink, signedStatement: Sdk.ISigned<Sdk.IWitnessStatement>): Promise<void>;
    rejectRequest(clerkPk: string, capabilityLink: CapabilityLink, rejectionReason: string): Promise<void>;
}
export interface IApi extends IPublicApi, IPrivateApi {
}
//# sourceMappingURL=authority.d.ts.map