import { Did } from '@internet-of-people/morpheus-crypto';
import * as Crypto from '../crypto';
import * as Sdk from '../sdk';
export interface IKeyData {
    index: number;
    auth: Crypto.AuthenticationData;
    validFromHeight: number | null;
    validUntilHeight: number | null;
    valid: boolean;
}
export declare type IRightsMap<T> = {
    [right in Sdk.Right]: T;
};
export interface IKeyRightHistoryPoint {
    height: number | null;
    valid: boolean;
}
export interface IKeyRightHistory {
    keyLink: string;
    history: IKeyRightHistoryPoint[];
    valid: boolean;
}
export interface IDidDocumentData {
    did: Crypto.DidData;
    keys: IKeyData[];
    rights: IRightsMap<IKeyRightHistory[]>;
    tombstonedAtHeight: number | null;
    tombstoned: boolean;
    queriedAtHeight: number;
}
export interface IDidDocument {
    readonly height: number;
    readonly did: Did;
    hasRightAt(auth: Crypto.Authentication, right: Sdk.Right, height: number): boolean;
    isTombstonedAt(height: number): boolean;
    toData(): IDidDocumentData;
    fromData(data: IDidDocumentData): void;
}
//# sourceMappingURL=did-document.d.ts.map